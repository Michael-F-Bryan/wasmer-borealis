// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package wasmer_borealis

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// whoamiResponse is returned by whoami on success.
type whoamiResponse struct {
	Viewer whoamiViewerUser `json:"viewer"`
}

// GetViewer returns whoamiResponse.Viewer, and is useful for accessing the field via an interface.
func (v *whoamiResponse) GetViewer() whoamiViewerUser { return v.Viewer }

// whoamiViewerUser includes the requested fields of the GraphQL type User.
type whoamiViewerUser struct {
	// Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
	Username string `json:"username"`
}

// GetUsername returns whoamiViewerUser.Username, and is useful for accessing the field via an interface.
func (v *whoamiViewerUser) GetUsername() string { return v.Username }

// The query or mutation executed by whoami.
const whoami_Operation = `
query whoami {
	viewer {
		username
	}
}
`

func whoami(
	ctx context.Context,
	client graphql.Client,
) (*whoamiResponse, error) {
	req := &graphql.Request{
		OpName: "whoami",
		Query:  whoami_Operation,
	}
	var err error

	var data whoamiResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
