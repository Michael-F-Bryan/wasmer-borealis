// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package wasmer_borealis

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// __getAllPackagesInput is used internally by genqlient
type __getAllPackagesInput struct {
	After string `json:"after"`
}

// GetAfter returns __getAllPackagesInput.After, and is useful for accessing the field via an interface.
func (v *__getAllPackagesInput) GetAfter() string { return v.After }

// getAllPackagesAllPackageVersionsPackageVersionConnection includes the requested fields of the GraphQL type PackageVersionConnection.
type getAllPackagesAllPackageVersionsPackageVersionConnection struct {
	// Contains the nodes in this connection.
	Edges []getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdge `json:"edges"`
	// Pagination data for this connection.
	PageInfo getAllPackagesAllPackageVersionsPackageVersionConnectionPageInfo `json:"pageInfo"`
}

// GetEdges returns getAllPackagesAllPackageVersionsPackageVersionConnection.Edges, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnection) GetEdges() []getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdge {
	return v.Edges
}

// GetPageInfo returns getAllPackagesAllPackageVersionsPackageVersionConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnection) GetPageInfo() getAllPackagesAllPackageVersionsPackageVersionConnectionPageInfo {
	return v.PageInfo
}

// getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdge includes the requested fields of the GraphQL type PackageVersionEdge.
// The GraphQL type's documentation follows.
//
// A Relay edge containing a `PackageVersion` and its cursor.
type getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdge struct {
	// The item at the end of the edge
	Node getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersion `json:"node"`
}

// GetNode returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdge.Node, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdge) GetNode() getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersion {
	return v.Node
}

// getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersion includes the requested fields of the GraphQL type PackageVersion.
type getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersion struct {
	// The ID of the object
	Id           string                                                                                                                           `json:"id"`
	Version      string                                                                                                                           `json:"version"`
	Distribution getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionDistributionPackageDistribution `json:"distribution"`
	Package      getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage                         `json:"package"`
}

// GetId returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersion.Id, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersion) GetId() string {
	return v.Id
}

// GetVersion returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersion.Version, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersion) GetVersion() string {
	return v.Version
}

// GetDistribution returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersion.Distribution, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersion) GetDistribution() getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionDistributionPackageDistribution {
	return v.Distribution
}

// GetPackage returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersion.Package, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersion) GetPackage() getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage {
	return v.Package
}

// getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionDistributionPackageDistribution includes the requested fields of the GraphQL type PackageDistribution.
type getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionDistributionPackageDistribution struct {
	// Download URL of the tar.gz file.
	// If the package was published with webc only,this will contain download URL for webc file instead.
	DownloadUrl     string `json:"downloadUrl"`
	WebcDownloadUrl string `json:"webcDownloadUrl"`
	WebcSha256Hash  string `json:"webcSha256Hash"`
}

// GetDownloadUrl returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionDistributionPackageDistribution.DownloadUrl, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionDistributionPackageDistribution) GetDownloadUrl() string {
	return v.DownloadUrl
}

// GetWebcDownloadUrl returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionDistributionPackageDistribution.WebcDownloadUrl, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionDistributionPackageDistribution) GetWebcDownloadUrl() string {
	return v.WebcDownloadUrl
}

// GetWebcSha256Hash returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionDistributionPackageDistribution.WebcSha256Hash, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionDistributionPackageDistribution) GetWebcSha256Hash() string {
	return v.WebcSha256Hash
}

// getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage includes the requested fields of the GraphQL type Package.
type getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage struct {
	// The name of the package without the owner
	PackageName string `json:"packageName"`
	// The ID of the object
	Id    string                                                                                                        `json:"id"`
	Owner getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwner `json:"-"`
}

// GetPackageName returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage.PackageName, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage) GetPackageName() string {
	return v.PackageName
}

// GetId returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage.Id, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage) GetId() string {
	return v.Id
}

// GetOwner returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage.Owner, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage) GetOwner() getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwner {
	return v.Owner
}

func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage
		Owner json.RawMessage `json:"owner"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Owner
		src := firstPass.Owner
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalgetAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwner(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage.Owner: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage struct {
	PackageName string `json:"packageName"`

	Id string `json:"id"`

	Owner json.RawMessage `json:"owner"`
}

func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage) __premarshalJSON() (*__premarshalgetAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage, error) {
	var retval __premarshalgetAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage

	retval.PackageName = v.PackageName
	retval.Id = v.Id
	{

		dst := &retval.Owner
		src := v.Owner
		var err error
		*dst, err = __marshalgetAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwner(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackage.Owner: %w", err)
		}
	}
	return &retval, nil
}

// getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwner includes the requested fields of the GraphQL interface PackageOwner.
//
// getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwner is implemented by the following types:
// getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerNamespace
// getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerPackage
// getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerUser
// The GraphQL type's documentation follows.
//
// Setup for backwards compatibility with existing frontends.
type getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwner interface {
	implementsGraphQLInterfacegetAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwner()
	// GetGlobalName returns the interface-field "globalName" from its implementation.
	GetGlobalName() string
	// GetGlobalId returns the interface-field "globalId" from its implementation.
	GetGlobalId() string
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerNamespace) implementsGraphQLInterfacegetAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwner() {
}
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerPackage) implementsGraphQLInterfacegetAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwner() {
}
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerUser) implementsGraphQLInterfacegetAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwner() {
}

func __unmarshalgetAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwner(b []byte, v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwner) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Namespace":
		*v = new(getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerNamespace)
		return json.Unmarshal(b, *v)
	case "Package":
		*v = new(getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerPackage)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PackageOwner.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwner: "%v"`, tn.TypeName)
	}
}

func __marshalgetAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwner(v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwner) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerNamespace:
		typename = "Namespace"

		result := struct {
			TypeName string `json:"__typename"`
			*getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerNamespace
		}{typename, v}
		return json.Marshal(result)
	case *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerPackage:
		typename = "Package"

		result := struct {
			TypeName string `json:"__typename"`
			*getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerPackage
		}{typename, v}
		return json.Marshal(result)
	case *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwner: "%T"`, v)
	}
}

// getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerNamespace includes the requested fields of the GraphQL type Namespace.
type getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerNamespace struct {
	GlobalName string `json:"globalName"`
	GlobalId   string `json:"globalId"`
	Typename   string `json:"__typename"`
}

// GetGlobalName returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerNamespace.GlobalName, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerNamespace) GetGlobalName() string {
	return v.GlobalName
}

// GetGlobalId returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerNamespace.GlobalId, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerNamespace) GetGlobalId() string {
	return v.GlobalId
}

// GetTypename returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerNamespace.Typename, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerNamespace) GetTypename() string {
	return v.Typename
}

// getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerPackage includes the requested fields of the GraphQL type Package.
type getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerPackage struct {
	GlobalName string `json:"globalName"`
	GlobalId   string `json:"globalId"`
	Typename   string `json:"__typename"`
}

// GetGlobalName returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerPackage.GlobalName, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerPackage) GetGlobalName() string {
	return v.GlobalName
}

// GetGlobalId returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerPackage.GlobalId, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerPackage) GetGlobalId() string {
	return v.GlobalId
}

// GetTypename returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerPackage.Typename, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerPackage) GetTypename() string {
	return v.Typename
}

// getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerUser includes the requested fields of the GraphQL type User.
type getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerUser struct {
	GlobalName string `json:"globalName"`
	GlobalId   string `json:"globalId"`
	Typename   string `json:"__typename"`
}

// GetGlobalName returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerUser.GlobalName, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerUser) GetGlobalName() string {
	return v.GlobalName
}

// GetGlobalId returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerUser.GlobalId, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerUser) GetGlobalId() string {
	return v.GlobalId
}

// GetTypename returns getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerUser.Typename, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionEdgesPackageVersionEdgeNodePackageVersionPackageOwnerUser) GetTypename() string {
	return v.Typename
}

// getAllPackagesAllPackageVersionsPackageVersionConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
type getAllPackagesAllPackageVersionsPackageVersionConnectionPageInfo struct {
	// When paginating forwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
}

// GetEndCursor returns getAllPackagesAllPackageVersionsPackageVersionConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getAllPackagesAllPackageVersionsPackageVersionConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// getAllPackagesResponse is returned by getAllPackages on success.
type getAllPackagesResponse struct {
	AllPackageVersions getAllPackagesAllPackageVersionsPackageVersionConnection `json:"allPackageVersions"`
}

// GetAllPackageVersions returns getAllPackagesResponse.AllPackageVersions, and is useful for accessing the field via an interface.
func (v *getAllPackagesResponse) GetAllPackageVersions() getAllPackagesAllPackageVersionsPackageVersionConnection {
	return v.AllPackageVersions
}

// The query or mutation executed by getAllPackages.
const getAllPackages_Operation = `
query getAllPackages ($after: String) {
	allPackageVersions(after: $after) {
		edges {
			node {
				id
				version
				distribution {
					downloadUrl
					webcDownloadUrl
					webcSha256Hash
				}
				package {
					packageName
					id
					owner {
						globalName
						globalId
						__typename
					}
				}
			}
		}
		pageInfo {
			endCursor
		}
	}
}
`

func getAllPackages(
	ctx context.Context,
	client graphql.Client,
	after string,
) (*getAllPackagesResponse, error) {
	req := &graphql.Request{
		OpName: "getAllPackages",
		Query:  getAllPackages_Operation,
		Variables: &__getAllPackagesInput{
			After: after,
		},
	}
	var err error

	var data getAllPackagesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
